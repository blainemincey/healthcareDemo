var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { CoreStitchAuth, DeviceFields } from "mongodb-stitch-core-sdk";
import version from "../../internal/common/Version";
import StitchUserFactoryImpl from "./StitchUserFactoryImpl";
var StitchAuthImpl = (function (_super) {
    __extends(StitchAuthImpl, _super);
    function StitchAuthImpl(requestClient, authRoutes, authStorage, appInfo) {
        var _this = _super.call(this, requestClient, authRoutes, authStorage) || this;
        _this.appInfo = appInfo;
        _this.listeners = new Set();
        return _this;
    }
    Object.defineProperty(StitchAuthImpl.prototype, "userFactory", {
        get: function () {
            return new StitchUserFactoryImpl(this);
        },
        enumerable: true,
        configurable: true
    });
    StitchAuthImpl.prototype.getProviderClient = function (factory, providerName) {
        if (isAuthProviderClientFactory(factory)) {
            return factory.getClient(this, this.requestClient, this.authRoutes);
        }
        else {
            return factory.getNamedClient(providerName, this.requestClient, this.authRoutes);
        }
    };
    StitchAuthImpl.prototype.loginWithCredential = function (credential) {
        return _super.prototype.loginWithCredentialInternal.call(this, credential);
    };
    StitchAuthImpl.prototype.linkWithCredential = function (user, credential) {
        return _super.prototype.linkUserWithCredentialInternal.call(this, user, credential);
    };
    StitchAuthImpl.prototype.logout = function () {
        return Promise.resolve(_super.prototype.logoutInternal.call(this));
    };
    Object.defineProperty(StitchAuthImpl.prototype, "deviceInfo", {
        get: function () {
            var info = {};
            if (this.hasDeviceId) {
                info[DeviceFields.DEVICE_ID] = this.deviceId;
            }
            if (this.appInfo.localAppName !== undefined) {
                info[DeviceFields.APP_ID] = this.appInfo.localAppName;
            }
            if (this.appInfo.localAppVersion !== undefined) {
                info[DeviceFields.APP_VERSION] = this.appInfo.localAppVersion;
            }
            info[DeviceFields.PLATFORM] = "js-server";
            info[DeviceFields.PLATFORM_VERSION] = process.version;
            info[DeviceFields.SDK_VERSION] = version;
            return info;
        },
        enumerable: true,
        configurable: true
    });
    StitchAuthImpl.prototype.addAuthListener = function (listener) {
        this.listeners.add(listener);
        this.onAuthEvent(listener);
    };
    StitchAuthImpl.prototype.removeAuthListener = function (listener) {
        this.listeners.delete(listener);
    };
    StitchAuthImpl.prototype.onAuthEvent = function (listener) {
        var _this = this;
        if (listener) {
            var auth_1 = this;
            var _1 = new Promise(function (resolve) {
                listener.onAuthEvent(auth_1);
                resolve(undefined);
            });
        }
        else {
            this.listeners.forEach(function (one) {
                _this.onAuthEvent(one);
            });
        }
    };
    return StitchAuthImpl;
}(CoreStitchAuth));
export default StitchAuthImpl;
function isAuthProviderClientFactory(factory) {
    return (factory.getClient !== undefined);
}
//# sourceMappingURL=StitchAuthImpl.js.map