import { handleRequestError } from "../../internal/common/StitchErrorUtils";
import { StitchRequestErrorCode } from "../../StitchRequestErrorCode";
import StitchError from "../../StitchError";
import StitchRequestError from "../../StitchRequestError";
import { BasicRequest } from "./BasicRequest";
function inspectResponse(response) {
    if (response.statusCode >= 200 && response.statusCode < 300) {
        return response;
    }
    return handleRequestError(response);
}
var StitchRequestClient = (function () {
    function StitchRequestClient(baseUrl, transport) {
        this.baseUrl = baseUrl;
        this.transport = transport;
    }
    StitchRequestClient.prototype.doRequest = function (stitchReq) {
        return this.transport
            .roundTrip(this.buildRequest(stitchReq))
            .catch(function (error) {
            throw new StitchRequestError(error, StitchRequestErrorCode.TRANSPORT_ERROR);
        })
            .then(inspectResponse);
    };
    StitchRequestClient.prototype.doStreamRequest = function (stitchReq, open, retryRequest) {
        if (open === void 0) { open = true; }
        return this.transport
            .stream(this.buildRequest(stitchReq), open, retryRequest)
            .catch(function (error) {
            if (error instanceof StitchError) {
                throw error;
            }
            throw new StitchRequestError(error, StitchRequestErrorCode.TRANSPORT_ERROR);
        });
    };
    StitchRequestClient.prototype.buildRequest = function (stitchReq) {
        return new BasicRequest.Builder()
            .withMethod(stitchReq.method)
            .withUrl("" + this.baseUrl + stitchReq.path)
            .withHeaders(stitchReq.headers)
            .withBody(stitchReq.body)
            .build();
    };
    return StitchRequestClient;
}());
export default StitchRequestClient;
//# sourceMappingURL=StitchRequestClient.js.map